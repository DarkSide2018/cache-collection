/*
 * This file is generated by jOOQ.
 */
package com.petclinic;


import com.petclinic.tables.FlywaySchemaHistory;
import com.petclinic.tables.Owners;
import com.petclinic.tables.Pets;
import com.petclinic.tables.Specialties;
import com.petclinic.tables.Types;
import com.petclinic.tables.VetSpecialties;
import com.petclinic.tables.Vets;
import com.petclinic.tables.Visits;
import com.petclinic.tables.records.FlywaySchemaHistoryRecord;
import com.petclinic.tables.records.OwnersRecord;
import com.petclinic.tables.records.PetsRecord;
import com.petclinic.tables.records.SpecialtiesRecord;
import com.petclinic.tables.records.TypesRecord;
import com.petclinic.tables.records.VetSpecialtiesRecord;
import com.petclinic.tables.records.VetsRecord;
import com.petclinic.tables.records.VisitsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<OwnersRecord> OWNERS_PKEY = Internal.createUniqueKey(Owners.OWNERS, DSL.name("owners_pkey"), new TableField[] { Owners.OWNERS.ID }, true);
    public static final UniqueKey<PetsRecord> PETS_PKEY = Internal.createUniqueKey(Pets.PETS, DSL.name("pets_pkey"), new TableField[] { Pets.PETS.ID }, true);
    public static final UniqueKey<SpecialtiesRecord> SPECIALTIES_PKEY = Internal.createUniqueKey(Specialties.SPECIALTIES, DSL.name("specialties_pkey"), new TableField[] { Specialties.SPECIALTIES.ID }, true);
    public static final UniqueKey<TypesRecord> TYPES_PKEY = Internal.createUniqueKey(Types.TYPES, DSL.name("types_pkey"), new TableField[] { Types.TYPES.ID }, true);
    public static final UniqueKey<VetSpecialtiesRecord> VET_SPECIALTIES_VET_ID_SPECIALTY_ID_KEY = Internal.createUniqueKey(VetSpecialties.VET_SPECIALTIES, DSL.name("vet_specialties_vet_id_specialty_id_key"), new TableField[] { VetSpecialties.VET_SPECIALTIES.VET_ID, VetSpecialties.VET_SPECIALTIES.SPECIALTY_ID }, true);
    public static final UniqueKey<VetsRecord> VETS_PKEY = Internal.createUniqueKey(Vets.VETS, DSL.name("vets_pkey"), new TableField[] { Vets.VETS.ID }, true);
    public static final UniqueKey<VisitsRecord> VISITS_PKEY = Internal.createUniqueKey(Visits.VISITS, DSL.name("visits_pkey"), new TableField[] { Visits.VISITS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<PetsRecord, OwnersRecord> PETS__PETS_OWNER_ID_FKEY = Internal.createForeignKey(Pets.PETS, DSL.name("pets_owner_id_fkey"), new TableField[] { Pets.PETS.OWNER_ID }, Keys.OWNERS_PKEY, new TableField[] { Owners.OWNERS.ID }, true);
    public static final ForeignKey<PetsRecord, TypesRecord> PETS__PETS_TYPE_ID_FKEY = Internal.createForeignKey(Pets.PETS, DSL.name("pets_type_id_fkey"), new TableField[] { Pets.PETS.TYPE_ID }, Keys.TYPES_PKEY, new TableField[] { Types.TYPES.ID }, true);
    public static final ForeignKey<VetSpecialtiesRecord, SpecialtiesRecord> VET_SPECIALTIES__VET_SPECIALTIES_SPECIALTY_ID_FKEY = Internal.createForeignKey(VetSpecialties.VET_SPECIALTIES, DSL.name("vet_specialties_specialty_id_fkey"), new TableField[] { VetSpecialties.VET_SPECIALTIES.SPECIALTY_ID }, Keys.SPECIALTIES_PKEY, new TableField[] { Specialties.SPECIALTIES.ID }, true);
    public static final ForeignKey<VetSpecialtiesRecord, VetsRecord> VET_SPECIALTIES__VET_SPECIALTIES_VET_ID_FKEY = Internal.createForeignKey(VetSpecialties.VET_SPECIALTIES, DSL.name("vet_specialties_vet_id_fkey"), new TableField[] { VetSpecialties.VET_SPECIALTIES.VET_ID }, Keys.VETS_PKEY, new TableField[] { Vets.VETS.ID }, true);
    public static final ForeignKey<VisitsRecord, PetsRecord> VISITS__VISITS_PET_ID_FKEY = Internal.createForeignKey(Visits.VISITS, DSL.name("visits_pet_id_fkey"), new TableField[] { Visits.VISITS.PET_ID }, Keys.PETS_PKEY, new TableField[] { Pets.PETS.ID }, true);
}
